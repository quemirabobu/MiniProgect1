package com.example.junk.controller;import com.example.junk.Service.CashService;import com.example.junk.Service.ProductService;import com.example.junk.Service.PurchasedProductService;import com.example.junk.Service.UserService;import com.example.junk.domain.*;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.databind.ObjectMapper;import jakarta.servlet.http.HttpSession;import lombok.extern.log4j.Log4j2;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import java.util.HashMap;import java.util.List;import java.util.Map;@Log4j2@Controllerpublic class PurchasedProductController {	private final PurchasedProductService purchasedProductService;	private final UserService userService;	private CashService cashService;	private final ProductService productService;	public PurchasedProductController(PurchasedProductService purchasedProductService,			UserService userService,			ProductService productService, CashService cashService) {		this.purchasedProductService = purchasedProductService;		this.userService = userService;		this.productService = productService;		this.cashService = cashService;	}	//    @GetMapping("/purchase/{Id}")	//    public String purchaseView(@PathVariable("Id") String Id, HttpSession session) {	//	//        User loginUser = (User) session.getAttribute("loginUser");	//	//        if(loginUser == null) {	//            return "redirect:/login";	//        }	//        return "miniroom";	//    }	//구매하기 버튼 눌렀을때 DB에 Id, pid 저장시켜줄 메소드	@ResponseBody	@PostMapping("/purchase")	public ResponseEntity<?> purchase(HttpSession session,			ProductEntity productEntity) {		log.info("productEntity일단 처음>>>> {}", productEntity);		UserDotori user = new UserDotori();		ResponseDTO<Map<String, String>> responseDTO = new ResponseDTO<>();		try {			System.out.println("success");			Map<String, String> returnMap = new HashMap<>();			PurchasedProductEntity purchasedProductEntity = new PurchasedProductEntity();			User loginUser = (User) session.getAttribute("loginUser"); //세션에 담긴 로그인 유저 정보 찾기			System.out.println(loginUser);			System.out.println(loginUser.getUserName());			System.out.println("this is User");			productEntity = purchasedProductService.getProductInfo(					productEntity.getPId()); //상품 id로 상품 정보 찾기			log.info("loginuser>>>> {}", loginUser);			purchasedProductEntity.setUser(loginUser); //구매테이블에 로그인한 유저 정보 담기			log.info("purchasedProductEntity>>>> {}", purchasedProductEntity);			System.out.println(purchasedProductEntity);			log.info("this is    loginUser.getBamtori()     from  purchase  >>>>> {} ",					loginUser.getBamtori());			log.info("this is    productEntity.getProductPrice()   from  purchase  >>>>> {} ",					productEntity.getProductPrice());			if (loginUser.getBamtori() < productEntity.getProductPrice()) {				log.info("this is         from  purchase  >>>>> {} ", "if로 들어옴");				System.out.println(loginUser.getBamtori() + "=============");				returnMap.put("msg", "charge"); //보유밤토리 적으면 충전 페이지 보내기				log.info("returnMap>>>> {}", returnMap);			} else {				log.info("this is         from  purchase  >>>>> {} ", "else로 들어옴");				loginUser.setBamtori(loginUser.getBamtori() - productEntity.getProductPrice());				log.info("this is         from  purchase  >>>>> {} ", "여기까지");				System.out.println(loginUser.getUserName());				System.out.println(loginUser.getId());				System.out.println(loginUser.getPassword());				userService.saveBamtori(loginUser); // 로그인 유저의 밤토리 세팅하기				log.info("this is    로그인 유저의 밤토리 세팅하기     from  purchase  >>>>> {} ", "여기까지");				purchasedProductEntity.setProductEntity(productEntity); //구매테이블에 상품 정보 담기				log.info("this is    구매테이블에 상품 정보 담기    from  purchase  >>>>> {} ", "여기까지");				purchasedProductService.purchase(purchasedProductEntity); //구매 테이블에 정보 저장하기				log.info("this is    /구매 테이블에 정보 저장하기    from  purchase  >>>>> {} ", "여기까지");				user.setUserName(loginUser.getUserName());				log.info("this is   user.setUserName(loginUser.getUserName());    from  purchase  >>>>> {} ", "여기까지");				long min = -productEntity.getProductPrice();				user.setDotori(min);				log.info("this is  user.setDotori(min);   from  purchase  >>>>> {} ", "여기까지");				returnMap.put("msg", "complete");				log.info("this is     user    from  purchase  >>>>> {} ", user );				cashService.ChargeCash(user);			}			responseDTO.setItem(returnMap);			responseDTO.setStatusCode(HttpStatus.OK.value());			return ResponseEntity.ok().body(responseDTO);		} catch (Exception e) {			responseDTO.setStatusCode(HttpStatus.BAD_REQUEST.value());			responseDTO.setErrorMessage(e.getMessage());			return ResponseEntity.badRequest().body(responseDTO);		}	}	//오른쪽 아래에 내가 구입한 물품 보여줄 메소드	@ResponseBody //ajax로 값을 받을떈 responsebody를 쓴다. (restcontroller를 썻다면 필요없었다)	@RequestMapping(value = "/preview", method = RequestMethod.POST)	public ResponseEntity<?> preview(HttpSession session,			ProductEntity productEntity) { //ajax로 주고받을 데이터의 형식이 productentitiy타입의 list라서 리턴타입도 맞춰준다.		long pcId = productEntity.getPcId();		ResponseDTO<Map<String, Object>> responseDTO = new ResponseDTO<>();		try {			User loginUser = (User) session.getAttribute("loginUser"); //세션에 저장된 로그인 유저의 데이터를 불러온다			List<Map<String, Object>> purchasedProductEntityList =					null;			if (loginUser != null) {				purchasedProductEntityList						= purchasedProductService.getOwingProduct(loginUser,						pcId); //아이디별로 구입한 상품을 리스트화 시켜서 가져온다.				responseDTO.setErrorMessage("Ok");				responseDTO.setItems(purchasedProductEntityList);				responseDTO.setStatusCode(HttpStatus.OK.value());			} else {				responseDTO.setErrorMessage("Fail");				responseDTO.setItems(null);				responseDTO.setStatusCode(HttpStatus.OK.value());			}			return ResponseEntity.ok().body(responseDTO);		} catch (Exception e) {			responseDTO.setStatusCode(HttpStatus.BAD_REQUEST.value());			responseDTO.setErrorMessage(e.getMessage());			return ResponseEntity.badRequest().body(responseDTO);		}	}}